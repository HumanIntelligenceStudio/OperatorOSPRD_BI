# 🚀 OperatorOS - Conversational Multi-Agent Intelligence Platform

## Complete Replit Implementation with Guided User Experience

**A powerful backend system combining conversational guidance with sophisticated 7-agent analysis - designed specifically for Replit Agent integration with no UI components.**

---

## 🎯 **System Overview**

### **Conversational Intelligence Platform**
OperatorOS is a backend-only system that provides:
- **Conversational Guidance**: Numbered selections and helpful prompts
- **7-Agent Analysis**: Comprehensive multi-perspective intelligence
- **Pure API Design**: Perfect for Replit Agent integration
- **No UI Components**: Clean backend-only architecture

### **Architecture**
- **Flask Backend**: RESTful API endpoints
- **PostgreSQL Database**: Conversation persistence
- **OpenAI Integration**: GPT-4 powered agents
- **Conversation Management**: Smart user guidance system

---

## 🛠 **Complete Implementation**

### **Dependencies (requirements.txt)**
```
Flask==2.3.3
Flask-SQLAlchemy==3.0.5
Flask-WTF==1.1.1
Flask-Limiter==3.5.0
psycopg2-binary==2.9.7
openai==1.3.0
python-dotenv==1.0.0
requests==2.31.0
Werkzeug==2.3.7
```

### **Environment Configuration (.env)**
```
# Core Configuration
OPENAI_API_KEY=your_openai_api_key_here
DATABASE_URL=postgresql://username:password@localhost/operatoros
SECRET_KEY=your_secret_key_here

# System Settings
FLASK_ENV=production
ADMIN_PASSWORD=secure_admin_password

# Rate Limiting
RATELIMIT_STORAGE_URL=redis://localhost:6379
RATELIMIT_DEFAULT=50 per hour
```

### **Database Models (models.py)**
```python
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
import uuid

db = SQLAlchemy()

class Conversation(db.Model):
    """Enhanced conversation tracking with session support"""
    __tablename__ = 'conversations'
    
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    is_complete = db.Column(db.Boolean, default=False, nullable=False)
    initial_input = db.Column(db.Text, nullable=False)
    
    # Session tracking
    session_id = db.Column(db.String(36), nullable=True)
    user_guided = db.Column(db.Boolean, default=False)  # Whether user was guided to this query
    
    # Agent tracking
    current_agent_index = db.Column(db.Integer, default=0)
    total_agents = db.Column(db.Integer, default=7)
    
    # Performance metrics
    total_tokens_used = db.Column(db.Integer, default=0)
    total_processing_time = db.Column(db.Float, default=0.0)
    
    # User feedback
    user_satisfaction = db.Column(db.Integer)  # 1-5 rating
    user_feedback = db.Column(db.Text)
    
    # Relationship
    entries = db.relationship('ConversationEntry', backref='conversation', 
                            lazy='dynamic', cascade='all, delete-orphan')

class ConversationEntry(db.Model):
    """Individual agent responses with enhanced tracking"""
    __tablename__ = 'conversation_entries'
    
    id = db.Column(db.Integer, primary_key=True)
    conversation_id = db.Column(db.String(36), db.ForeignKey('conversations.id'), nullable=False)
    agent_name = db.Column(db.String(100), nullable=False)
    agent_role = db.Column(db.String(100), nullable=False)
    response = db.Column(db.Text, nullable=False)
    processing_time = db.Column(db.Float, default=0.0)
    tokens_used = db.Column(db.Integer, default=0)
    created_at = db.Column(db.DateTime, default=datetime.utcnow, nullable=False)
    
    # Input tracking
    input_text = db.Column(db.Text, nullable=False)
    input_context = db.Column(db.JSON)  # Previous agent insights
    
    # Quality metrics
    response_quality = db.Column(db.Float)  # Calculated quality score
    user_helpful = db.Column(db.Boolean)   # User found helpful

class UserSession(db.Model):
    """Track user sessions and conversation state"""
    __tablename__ = 'user_sessions'
    
    session_id = db.Column(db.String(36), primary_key=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    conversation_state = db.Column(db.JSON, default=dict)
    total_interactions = db.Column(db.Integer, default=0)
    last_intent = db.Column(db.String(50))
    
    def to_dict(self):
        return {
            'session_id': self.session_id,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat(),
            'conversation_state': self.conversation_state,
            'total_interactions': self.total_interactions,
            'last_intent': self.last_intent
        }
```

### **Agent System (agents.py)**
```python
import openai
import time
import logging
from typing import Dict, List, Any
from datetime import datetime
import os

from models import db, Conversation, ConversationEntry

class Agent:
    """Base agent class with enhanced conversation capabilities"""
    
    def __init__(self, name: str, role: str, system_prompt: str):
        self.name = name
        self.role = role
        self.system_prompt = system_prompt
        self.client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
    
    def process(self, input_text: str, conversation_history: List[Dict] = None) -> Dict[str, Any]:
        """Process input through this agent"""
        try:
            start_time = time.time()
            
            # Build messages
            messages = [{"role": "system", "content": self.system_prompt}]
            
            # Add conversation history if provided
            if conversation_history:
                for entry in conversation_history:
                    messages.append({
                        "role": "user", 
                        "content": f"Previous agent ({entry['agent_name']}): {entry['input_text']}"
                    })
                    messages.append({
                        "role": "assistant", 
                        "content": entry['response']
                    })
            
            # Add current input
            messages.append({"role": "user", "content": input_text})
            
            # Get response
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                max_tokens=1000,
                temperature=0.7
            )
            
            processing_time = time.time() - start_time
            
            return {
                "success": True,
                "response": response.choices[0].message.content.strip(),
                "processing_time": processing_time,
                "tokens_used": response.usage.total_tokens,
                "input_text": input_text
            }
            
        except Exception as e:
            logging.error(f"Agent {self.name} error: {str(e)}")
            return {
                "success": False,
                "error": str(e),
                "response": "I apologize, but I encountered an error processing your request.",
                "processing_time": 0,
                "tokens_used": 0,
                "input_text": input_text
            }

class AgentChain:
    """Manages the 7-agent processing chain"""
    
    def __init__(self):
        self.agents = [
            Agent(
                name="Chief Strategy Agent",
                role="Strategic Analysis",
                system_prompt="""You are the Chief Strategy Agent (CSA) for OperatorOS. You provide strategic analysis and big-picture thinking for any challenge or opportunity presented to you.

Your role:
- Analyze strategic implications and opportunities
- Identify key challenges and potential solutions
- Provide high-level strategic recommendations
- Set the foundation for operational analysis

Your approach:
1. Understand the core challenge or opportunity
2. Analyze the strategic landscape and context
3. Identify key success factors and potential risks
4. Provide strategic recommendations and direction

Keep your response focused and strategic. Always end with a clear transition that sets up the next agent (COO) to build upon your strategic foundation.

Example transition: "From a strategic perspective, the key operational question becomes: How can we systematically implement these strategic priorities while maintaining quality and efficiency?"

Be conversational, insightful, and provide concrete strategic guidance that forms the foundation for the complete analysis."""
            ),
            Agent(
                name="Chief Operating Agent",
                role="Operations & Execution",
                system_prompt="""You are the Chief Operating Agent (COO) for OperatorOS. You focus on execution, processes, and operational excellence, building upon the strategic foundation provided by the CSA.

Your role:
- Turn strategic vision into operational reality
- Design systems and processes for implementation
- Identify resource requirements and operational challenges
- Create step-by-step execution frameworks

Your approach:
1. Build directly on the strategic insights from the CSA
2. Design operational systems and processes
3. Identify resource and capability requirements
4. Create detailed implementation plans and timelines

Focus on "how to execute" rather than "what to do." Always end with a clear transition that sets up the CTO to consider technology and automation opportunities.

Example transition: "From an operational standpoint, the critical technology question becomes: What tools, systems, and automation can we implement to make these operations more efficient and scalable?"

Be practical, systematic, and provide concrete operational guidance that bridges strategy and execution."""
            ),
            Agent(
                name="Chief Technology Agent",
                role="Technology & Innovation",
                system_prompt="""You are the Chief Technology Agent (CTO) for OperatorOS. You focus on technology solutions, automation, and innovation, building upon the strategic and operational insights from previous agents.

Your role:
- Identify technology opportunities and solutions
- Recommend automation and digital transformation approaches
- Design technical architectures and system integrations
- Assess technology risks, costs, and implementation requirements

Your approach:
1. Analyze technology needs from the strategic and operational context
2. Recommend specific tools, platforms, and technical solutions
3. Identify automation opportunities and digital transformation potential
4. Design technical implementation approaches and architectures

Focus on practical technology solutions that support the strategic and operational goals. Always end with a clear transition that sets up the CFO to consider financial implications.

Example transition: "From a technology perspective, the key financial question becomes: What are the cost implications, ROI projections, and budget requirements for implementing these technical solutions?"

Be innovative, technically sound, and provide concrete technology guidance that enables the strategic and operational vision."""
            ),
            Agent(
                name="Chief Financial Agent",
                role="Financial Planning",
                system_prompt="""You are the Chief Financial Agent (CFO) for OperatorOS. You focus on financial planning, analysis, and optimization, building upon the strategic, operational, and technology insights from previous agents.

Your role:
- Analyze financial implications and requirements
- Create budget frameworks and financial projections
- Assess ROI, profitability, and financial viability
- Identify financial risks and optimization opportunities

Your approach:
1. Analyze financial requirements from the strategic, operational, and technology context
2. Create budget estimates and financial projections
3. Assess return on investment and financial viability
4. Identify financial optimization opportunities and risk mitigation

Focus on numbers, costs, revenue potential, and financial sustainability. Always end with a clear transition that sets up the CMO to consider market and growth opportunities.

Example transition: "From a financial perspective, the critical marketing question becomes: How can we position this in the market and create sustainable growth while maintaining these financial parameters?"

Be analytical, numbers-driven, and provide concrete financial guidance that ensures economic viability and optimization."""
            ),
            Agent(
                name="Chief Marketing Agent",
                role="Growth & Positioning",
                system_prompt="""You are the Chief Marketing Agent (CMO) for OperatorOS. You focus on growth, positioning, and market development, building upon all previous insights from strategy, operations, technology, and finance.

Your role:
- Develop growth strategies and market positioning
- Create brand and messaging frameworks
- Design customer acquisition and retention approaches
- Identify market opportunities and competitive advantages

Your approach:
1. Analyze market opportunities from the context of previous agent insights
2. Develop positioning and messaging strategies
3. Create growth and customer acquisition plans
4. Design marketing and communication frameworks

Focus on growth, audiences, market positioning, and competitive strategy. Always end with a clear transition that sets up the CPO to consider people and team requirements.

Example transition: "From a marketing and growth perspective, the essential people question becomes: What team structure, skills, and human development approach do we need to execute this growth strategy effectively?"

Be creative, growth-focused, and provide concrete marketing guidance that drives sustainable market success."""
            ),
            Agent(
                name="Chief People Agent",
                role="Human Development",
                system_prompt="""You are the Chief People Agent (CPO) for OperatorOS. You focus on human development, team building, and organizational growth, building upon all previous insights from strategy, operations, technology, finance, and marketing.

Your role:
- Analyze people and team requirements
- Design organizational structures and development plans
- Create leadership and culture frameworks
- Optimize human potential and team effectiveness

Your approach:
1. Analyze people needs from all previous agent insights
2. Design team structures, roles, and responsibilities
3. Create development and training plans
4. Optimize communication, collaboration, and culture

Focus on people, culture, leadership, and human potential. Always end with a clear transition that sets up the CIO to synthesize all insights into strategic intelligence.

Example transition: "From a people and development perspective, the final intelligence question becomes: How do we synthesize all these insights into a comprehensive, prioritized action plan that maximizes our chances of success?"

Be empathetic, people-focused, and provide concrete guidance on optimizing human potential and organizational effectiveness."""
            ),
            Agent(
                name="Chief Intelligence Agent",
                role="Strategic Intelligence",
                system_prompt="""You are the Chief Intelligence Agent (CIO) for OperatorOS. You synthesize all previous insights into strategic intelligence and provide the final comprehensive analysis.

Your role:
- Synthesize insights from all previous agents (Strategy, Operations, Technology, Finance, Marketing, People)
- Identify patterns, connections, and priority recommendations
- Provide comprehensive strategic intelligence
- Create clear action plans and success metrics

Your approach:
1. Synthesize all previous agent insights into a cohesive intelligence brief
2. Identify key patterns and connections across all perspectives
3. Prioritize recommendations based on impact and feasibility
4. Create clear next steps and success metrics

This is the final analysis - provide comprehensive strategic intelligence that ties everything together.

Structure your response as:
**🧠 Strategic Intelligence Summary**

**Key Insights:**
- Top 3-5 strategic insights from all agent perspectives

**Priority Recommendations:**
- Immediate actions (Next 30 days)
- Short-term initiatives (Next 3 months)
- Long-term strategic moves (Next 6-12 months)

**Success Metrics:**
- How to measure progress and success

**Critical Success Factors:**
- What must go right for this to succeed

**Next Steps:**
- Specific, actionable first steps to take immediately

Be comprehensive, insightful, and provide strategic intelligence that gives the user a clear path forward."""
            )
        ]
    
    def process_query(self, conversation_id: str, initial_query: str) -> Dict[str, Any]:
        """Process query through all agents"""
        try:
            conversation = Conversation.query.get(conversation_id)
            if not conversation:
                return {"success": False, "error": "Conversation not found"}
            
            current_input = initial_query
            conversation_history = []
            total_tokens = 0
            total_processing_time = 0
            
            for i, agent in enumerate(self.agents):
                # Update conversation status
                conversation.current_agent_index = i
                db.session.commit()
                
                # Process through agent
                result = agent.process(current_input, conversation_history)
                
                if not result['success']:
                    return {"success": False, "error": f"Agent {agent.name} failed: {result['error']}"}
                
                # Save to database
                entry = ConversationEntry(
                    conversation_id=conversation_id,
                    agent_name=agent.name,
                    agent_role=agent.role,
                    response=result['response'],
                    processing_time=result['processing_time'],
                    tokens_used=result['tokens_used'],
                    input_text=result['input_text']
                )
                db.session.add(entry)
                
                # Update totals
                total_tokens += result['tokens_used']
                total_processing_time += result['processing_time']
                
                # Add to conversation history
                conversation_history.append({
                    'agent_name': agent.name,
                    'agent_role': agent.role,
                    'response': result['response'],
                    'input_text': result['input_text']
                })
                
                # Prepare input for next agent
                current_input = self._extract_next_focus(result['response'])
                
                db.session.commit()
            
            # Mark conversation as complete
            conversation.is_complete = True
            conversation.total_tokens_used = total_tokens
            conversation.total_processing_time = total_processing_time
            db.session.commit()
            
            # Format final analysis
            analysis = self._format_analysis(conversation_history)
            
            return {
                "success": True,
                "analysis": analysis,
                "agents_completed": len(self.agents),
                "total_tokens": total_tokens,
                "processing_time": total_processing_time,
                "conversation_id": conversation_id
            }
            
        except Exception as e:
            logging.error(f"Error in agent chain: {str(e)}")
            return {"success": False, "error": str(e)}
    
    def _extract_next_focus(self, response: str) -> str:
        """Extract focus area for next agent"""
        # Look for transition statements
        transitions = [
            "question becomes:",
            "consideration is:",
            "focus should be:",
            "next step is:",
            "key question:"
        ]
        
        for transition in transitions:
            if transition in response.lower():
                parts = response.lower().split(transition)
                if len(parts) > 1:
                    return parts[1].strip()[:200]  # Limit length
        
        # Fallback: use last paragraph
        paragraphs = response.split('\n\n')
        if len(paragraphs) > 1:
            return paragraphs[-1].strip()[:200]
        
        return response[-200:]  # Last 200 characters
    
    def _format_analysis(self, conversation_history: List[Dict]) -> str:
        """Format the complete analysis for output"""
        analysis = "# 🚀 OperatorOS Multi-Agent Analysis\n\n"
        
        for entry in conversation_history:
            analysis += f"## {entry['agent_name']}\n"
            analysis += f"**Role:** {entry['agent_role']}\n\n"
            analysis += f"{entry['response']}\n\n"
            analysis += "---\n\n"
        
        return analysis
```

### **Conversation Manager (conversation_manager.py)**
```python
import random
from typing import Dict, List, Any
from datetime import datetime
import re

class ConversationManager:
    """Manages conversational flow and user guidance"""
    
    def __init__(self):
        self.intent_patterns = {
            'greeting': [r'hello', r'hi', r'hey', r'good morning', r'good afternoon'],
            'help': [r'help', r'what can you do', r'how does this work', r'guide me'],
            'business': [r'business', r'startup', r'company', r'entrepreneur', r'revenue'],
            'career': [r'career', r'job', r'work', r'professional', r'skills'],
            'personal': [r'personal', r'life', r'goals', r'development', r'growth'],
            'strategy': [r'strategy', r'plan', r'planning', r'direction', r'roadmap'],
            'technology': [r'technology', r'tech', r'software', r'app', r'digital'],
            'finance': [r'money', r'financial', r'budget', r'investment', r'funding']
        }
    
    def get_welcome_message(self) -> str:
        """Generate welcoming introduction message"""
        return """👋 **Welcome to OperatorOS!**

I'm your AI-powered strategic intelligence system with **7 specialized agents** ready to help you with comprehensive analysis and planning.

**What makes me special?**
• **Chief Strategy Agent** - Strategic planning & big picture thinking
• **Chief Operating Agent** - Operations, processes & execution
• **Chief Technology Agent** - Tech solutions & automation
• **Chief Financial Agent** - Financial planning & analysis  
• **Chief Marketing Agent** - Growth strategies & positioning
• **Chief People Agent** - Team building & human development
• **Chief Intelligence Agent** - Data synthesis & final insights

**I can help you with:**
✅ Business strategy and startup planning
✅ Career development and transitions
✅ Personal productivity and life optimization
✅ Technology decisions and digital transformation
✅ Financial planning and investment strategies
✅ Marketing and growth strategies
✅ Team building and organizational development

**What would you like to explore today?**"""
    
    def get_welcome_suggestions(self) -> List[str]:
        """Get initial conversation suggestions"""
        return [
            "1. 🚀 Get help with business strategy and planning",
            "2. 💼 Explore career development and transitions", 
            "3. 📈 Analyze a specific challenge or opportunity",
            "4. 🎯 Set up personal goals and productivity systems",
            "5. 💡 Evaluate a technology or investment decision",
            "6. 📚 See examples of what I can help with",
            "7. ❓ Learn more about how my 7-agent system works"
        ]
    
    def process_input(self, user_input: str, session_id: str) -> Dict[str, Any]:
        """Process user input and provide appropriate response"""
        
        # Detect intent
        intent = self._detect_intent(user_input)
        
        # Handle different types of input
        if intent == 'greeting':
            return self._handle_greeting()
        elif intent == 'help':
            return self._handle_help_request()
        elif self._is_numbered_selection(user_input):
            return self._handle_numbered_selection(user_input)
        elif self._is_ready_for_analysis(user_input):
            return self._handle_analysis_request(user_input)
        elif intent in ['business', 'career', 'personal', 'technology']:
            return self._handle_topic_interest(intent, user_input)
        else:
            return self._handle_general_input(user_input)
    
    def _detect_intent(self, text: str) -> str:
        """Detect user intent from input"""
        text_lower = text.lower()
        
        for intent, patterns in self.intent_patterns.items():
            for pattern in patterns:
                if re.search(pattern, text_lower):
                    return intent
        
        return 'general'
    
    def _is_numbered_selection(self, text: str) -> bool:
        """Check if input is a numbered selection"""
        return bool(re.match(r'^\d+[.\s]?', text.strip()))
    
    def _is_ready_for_analysis(self, text: str) -> bool:
        """Check if input is detailed enough for full analysis"""
        return len(text.strip()) > 50 and any(word in text.lower() for word in [
            'help me', 'analyze', 'strategy', 'plan', 'advice', 'guidance', 'should i'
        ])
    
    def _handle_greeting(self) -> Dict[str, Any]:
        """Handle greeting messages"""
        greetings = [
            "Hello! Great to meet you! I'm excited to help you with strategic analysis and planning.",
            "Hi there! I'm your OperatorOS intelligence system, ready to tackle any challenge you have.",
            "Hey! Welcome to OperatorOS. I have 7 specialized agents ready to help you succeed."
        ]
        
        return {
            "response": f"{random.choice(greetings)}\n\n**What would you like to work on today?**",
            "suggestions": [
                "1. 🚀 Business strategy and planning",
                "2. 💼 Career development guidance",
                "3. 📊 Analyze a specific challenge",
                "4. 🎯 Personal productivity optimization",
                "5. 💡 Technology or investment decision",
                "6. 📚 See examples of what I can do"
            ]
        }
    
    def _handle_help_request(self) -> Dict[str, Any]:
        """Handle help requests"""
        return {
            "response": self.get_help_guide(),
            "suggestions": self.get_help_suggestions()
        }
    
    def _handle_numbered_selection(self, text: str) -> Dict[str, Any]:
        """Handle numbered menu selections"""
        try:
            number = int(re.match(r'(\d+)', text.strip()).group(1))
            
            if number == 1:  # Business strategy
                return self._guide_business_strategy()
            elif number == 2:  # Career development
                return self._guide_career_development()
            elif number == 3:  # Analyze challenge
                return self._guide_challenge_analysis()
            elif number == 4:  # Personal productivity
                return self._guide_personal_productivity()
            elif number == 5:  # Technology/investment
                return self._guide_technology_decisions()
            elif number == 6:  # Examples
                return self._show_examples()
            elif number == 7:  # How it works
                return self._explain_system()
            else:
                return self._handle_invalid_selection()
        except:
            return self._handle_invalid_selection()
    
    def _guide_business_strategy(self) -> Dict[str, Any]:
        """Guide user through business strategy options"""
        return {
            "response": """🚀 **Business Strategy & Planning**

I can help you with comprehensive business analysis across all key areas. My 7-agent team will examine your situation from strategic, operational, technical, financial, marketing, people, and intelligence perspectives.

**What type of business guidance do you need?**""",
            "suggestions": [
                "1. 💡 I want to start a new business or validate an idea",
                "2. 📈 I need help scaling my existing business",
                "3. 🎯 I want to enter a new market or launch a product",
                "4. 🔄 I'm considering a business pivot or transformation",
                "5. 💰 I need funding strategy and investor preparation",
                "6. 🏢 I want to optimize operations and improve efficiency",
                "7. 🌟 I have a specific business challenge to analyze"
            ]
        }
    
    def _guide_career_development(self) -> Dict[str, Any]:
        """Guide user through career development options"""
        return {
            "response": """💼 **Career Development & Transitions**

I can provide comprehensive career analysis examining your skills, opportunities, market positioning, financial implications, and strategic career moves.

**What career area would you like to explore?**""",
            "suggestions": [
                "1. 🔄 I want to transition to a new career field",
                "2. 📊 I need help advancing in my current role",
                "3. 🎯 I want to develop specific skills for career growth",
                "4. 💰 I'm considering entrepreneurship vs. employment",
                "5. 🌐 I want to explore remote work or freelancing",
                "6. 👥 I need guidance on leadership and management",
                "7. 📈 I have a specific career decision to analyze"
            ]
        }
    
    def _guide_challenge_analysis(self) -> Dict[str, Any]:
        """Guide user to describe their challenge"""
        return {
            "response": """📊 **Challenge Analysis**

Perfect! I excel at analyzing complex challenges from multiple perspectives. To give you the best analysis, I'll need some details about your situation.

**Please describe your challenge or opportunity:**

• What's the current situation?
• What are you trying to achieve?
• What obstacles are you facing?
• What resources do you have available?
• What's your timeline?

The more specific you can be, the better my 7-agent analysis will be!""",
            "suggestions": [
                "1. 📝 Let me describe my situation in detail",
                "2. 🎯 I need help defining the problem first",
                "3. 📚 Show me examples of challenges you've analyzed",
                "4. 🔍 I want to understand your analysis process"
            ]
        }
    
    def _guide_personal_productivity(self) -> Dict[str, Any]:
        """Guide user through personal productivity options"""
        return {
            "response": """🎯 **Personal Productivity & Life Optimization**

I can help you analyze and optimize your personal systems, goals, and productivity across all life areas - from strategic planning to daily operations.

**What aspect of personal development interests you most?**""",
            "suggestions": [
                "1. ⚡ Productivity systems and time management",
                "2. 🎯 Goal setting and achievement strategies",
                "3. ⚖️ Work-life balance and stress management",
                "4. 🧠 Learning and skill development planning",
                "5. 💰 Personal finance and investment strategy",
                "6. 🏠 Life organization and habit formation",
                "7. 📈 I have a specific personal challenge to analyze"
            ]
        }
    
    def _guide_technology_decisions(self) -> Dict[str, Any]:
        """Guide user through technology decisions"""
        return {
            "response": """💡 **Technology & Investment Decisions**

I can analyze technology choices, digital transformation opportunities, and investment decisions from technical, financial, strategic, and operational perspectives.

**What type of technology decision do you need help with?**""",
            "suggestions": [
                "1. 📱 Mobile app vs. web application decision",
                "2. 🛠️ Technology stack and tool selection",
                "3. 🤖 Automation and AI implementation strategy",
                "4. 💻 Digital transformation planning",
                "5. 💰 Technology investment and ROI analysis",
                "6. 🔧 Software development and project planning",
                "7. 🎯 I have a specific technology challenge to analyze"
            ]
        }
    
    def _show_examples(self) -> Dict[str, Any]:
        """Show example queries and use cases"""
        return {
            "response": self.get_examples(),
            "suggestions": self.get_example_suggestions()
        }
    
    def _explain_system(self) -> Dict[str, Any]:
        """Explain how the 7-agent system works"""
        return {
            "response": """🔧 **How My 7-Agent System Works**

When you give me a detailed question, I process it through 7 specialized agents in sequence:

**1. 🎯 Chief Strategy Agent (CSA)**
• Analyzes strategic implications and opportunities
• Provides big-picture thinking and strategic recommendations
• Sets the foundation for all other analysis

**2. ⚙️ Chief Operating Agent (COO)**
• Focuses on execution, processes, and operations
• Designs systems and implementation frameworks
• Turns strategy into actionable operational plans

**3. 💻 Chief Technology Agent (CTO)**
• Identifies technology solutions and innovations
• Recommends tools, platforms, and digital strategies
• Assesses technical risks and opportunities

**4. 💰 Chief Financial Agent (CFO)**
• Analyzes financial implications and requirements
• Creates budget frameworks and ROI projections
• Identifies financial risks and optimization opportunities

**5. 📈 Chief Marketing Agent (CMO)**
• Develops growth strategies and market positioning
• Creates brand and customer acquisition strategies
• Analyzes competitive landscape and opportunities

**6. 👥 Chief People Agent (CPO)**
• Focuses on team building and human development
• Designs organizational structures and cultures
• Optimizes human potential and relationships

**7. 🧠 Chief Intelligence Agent (CIO)**
• Synthesizes all previous insights into strategic intelligence
• Identifies patterns and prioritizes recommendations
• Provides final action plans and success metrics

Each agent builds on the previous one's insights, creating a comprehensive, multi-perspective analysis of your situation.""",
            "suggestions": [
                "1. 🚀 Try the system with a business challenge",
                "2. 💼 Test it with a career question",
                "3. 🎯 Use it for personal development",
                "4. 📚 See more examples of analysis",
                "5. 💡 Ask a specific question for analysis"
            ]
        }
    
    def _handle_invalid_selection(self) -> Dict[str, Any]:
        """Handle invalid menu selections"""
        return {
            "response": "I didn't quite catch that selection. Could you please choose from the numbered options, or feel free to describe what you'd like help with in your own words?",
            "suggestions": [
                "1. 🚀 Business strategy and planning",
                "2. 💼 Career development",
                "3. 📊 Analyze a specific challenge",
                "4. 🎯 Personal productivity",
                "5. 💡 Technology decisions",
                "6. ❓ Get help and guidance"
            ]
        }
    
    def _handle_topic_interest(self, intent: str, user_input: str) -> Dict[str, Any]:
        """Handle when user expresses interest in a topic"""
        topic_responses = {
            'business': "Great! I love helping with business challenges. Could you tell me more about your specific business situation?",
            'career': "Excellent! Career development is one of my specialties. What's your current career situation and what are you hoping to achieve?",
            'personal': "Perfect! Personal development and life optimization are areas where my multi-agent analysis really shines. What aspect of your personal life would you like to improve?",
            'technology': "Wonderful! Technology decisions benefit greatly from multi-perspective analysis. What's the technology challenge or decision you're facing?"
        }
        
        return {
            "response": f"{topic_responses.get(intent, 'I can definitely help with that!')} The more specific you can be, the better my analysis will be.\n\n**For the best results, please describe:**\n• Your current situation\n• What you're trying to achieve\n• Any specific challenges or constraints\n• Your timeline and resources",
            "suggestions": [
                "1. 📝 Let me describe my situation in detail",
                "2. 🎯 I need help defining the problem first",
                "3. 📚 Show me examples related to this topic",
                "4. 🔄 Choose a different topic area"
            ]
        }
    
    def _handle_general_input(self, user_input: str) -> Dict[str, Any]:
        """Handle general input that doesn't fit specific categories"""
        if len(user_input.strip()) < 20:
            return {
                "response": "I'd love to help! Could you provide a bit more detail about what you're looking for? The more specific you can be, the better I can assist you with my 7-agent analysis system.",
                "suggestions": [
                    "1. 📝 Let me describe my situation in more detail",
                    "2. 🎯 I need help figuring out what I want",
                    "3. 📚 Show me examples of what you can help with",
                    "4. 🔄 Start over with the main menu"
                ]
            }
        else:
            return {
                "response": f"Interesting! I can see you're thinking about: \"{user_input[:100]}...\"\n\nThis sounds like something my 7-agent system could provide valuable insights on. Would you like me to run a comprehensive analysis, or would you prefer to refine your question first?",
                "suggestions": [
                    "1. 🚀 Yes, run the full 7-agent analysis",
                    "2. 📝 Let me provide more details first",
                    "3. 🎯 Help me refine my question",
                    "4. 📚 Show me similar examples you've analyzed"
                ]
            }
    
    def _handle_analysis_request(self, user_input: str) -> Dict[str, Any]:
        """Handle request for full analysis"""
        return {
            "response": f"Perfect! I can see you have a detailed question that would benefit from my full 7-agent analysis:\n\n\"{user_input[:200]}...\"\n\n**I'm ready to analyze this through all 7 perspectives:**\n• Strategic implications\n• Operational requirements\n• Technology solutions\n• Financial considerations\n• Marketing/growth opportunities\n• People/team needs\n• Intelligence synthesis\n\nThis will take about 30-60 seconds. Should I proceed with the comprehensive analysis?",
            "suggestions": [
                "1. 🚀 Yes, run the full 7-agent analysis",
                "2. 📝 Let me add more context first",
                "3. 🎯 Help me refine the question",
                "4. 📚 Show me what the analysis will include"
            ],
            "ready_for_analysis": True,
            "query": user_input
        }
    
    def format_analysis_response(self, analysis_result: Dict[str, Any]) -> str:
        """Format the analysis response for user"""
        return f"""🎉 **Analysis Complete!**

I've processed your question through all 7 agents and generated a comprehensive strategic intelligence report. Here's what I discovered:

{analysis_result['analysis']}

---

**Analysis Summary:**
• **Agents Completed:** {analysis_result['agents_completed']}/7
• **Processing Time:** {analysis_result['processing_time']:.1f} seconds
• **Depth Score:** {analysis_result['total_tokens']} tokens of analysis

**This analysis covers strategic, operational, technical, financial, marketing, people, and intelligence perspectives on your situation.**"""
    
    def get_post_analysis_suggestions(self) -> List[str]:
        """Get suggestions after analysis is complete"""
        return [
            "1. 💡 Ask a follow-up question about the analysis",
            "2. 🎯 Dive deeper into a specific recommendation",
            "3. 📊 Analyze a related challenge or opportunity",
            "4. 💼 Get help implementing the recommendations",
            "5. 🔄 Ask a completely new question",
            "6. 📋 Export or save this analysis"
        ]
    
    def get_help_guide(self) -> str:
        """Comprehensive help guide"""
        return """📚 **OperatorOS Help Guide**

**What I Do:**
I'm an AI system with 7 specialized agents that provide comprehensive analysis on any topic. Think of me as your personal strategic consulting team.

**How to Get the Best Results:**

**1. Be Specific** 📝
• Instead of: "Help me with my business"
• Try: "I run a small marketing agency with 5 employees and want to scale to $100K/month revenue within 12 months"

**2. Provide Context** 🎯
• Your current situation
• What you're trying to achieve
• Resources available
• Timeline constraints
• Specific challenges

**3. Ask Strategic Questions** 💡
• "Should I..." decisions
• "How can I..." planning
• "What's the best way to..." optimization
• "Help me analyze..." evaluation

**4. Topics I Excel At:**
• Business strategy and planning
• Career development and transitions
• Personal productivity and goals
• Technology and investment decisions
• Financial planning and analysis
• Marketing and growth strategies
• Team building and leadership

**5. My 7-Agent Process:**
When you give me a detailed question, I analyze it through 7 different expert perspectives to give you comprehensive insights you won't get anywhere else."""
    
    def get_help_suggestions(self) -> List[str]:
        """Get help-related suggestions"""
        return [
            "1. 📚 See examples of great questions to ask",
            "2. 🔧 Learn how my 7-agent system works",
            "3. 🎯 Get help formulating your question",
            "4. 🚀 Try the system with a sample question",
            "5. 💡 Browse topics I can help with"
        ]
    
    def get_examples(self) -> str:
        """Provide comprehensive examples"""
        return """📚 **Examples of What I Can Help With**

**🚀 Business Strategy Examples:**
• "I want to start a SaaS business targeting small restaurants. I have $50K in savings and 2 years of software development experience. What's the best approach?"
• "My consulting firm has grown to $30K/month but I'm overwhelmed. How can I scale to $100K/month without burning out?"
• "Should I pivot my e-commerce business to focus on B2B customers instead of B2C?"

**💼 Career Development Examples:**
• "I'm a marketing manager who wants to transition to product management. I have 5 years of experience and an MBA. What's my best strategy?"
• "I'm considering leaving my corporate job to start freelancing. I make $85K annually and have 6 months of savings. Should I do it?"
• "How can I position myself for a promotion to senior director level within the next 18 months?"

**🎯 Personal Development Examples:**
• "I want to build a morning routine that includes exercise, meditation, and skill development. I have 2 hours available before work."
• "How can I better manage my time between my full-time job, side business, and family responsibilities?"
• "I want to learn data science to advance my career. I have basic Python knowledge and can dedicate 10 hours per week."

**💡 Technology & Investment Examples:**
• "Should I build my startup's MVP as a mobile app or web application? My target users are busy professionals."
• "I have $100K to invest and want to build a diverse portfolio. I'm 32 years old with moderate risk tolerance."
• "What's the best technology stack for building a social media management platform?"

**🏢 Leadership & Team Examples:**
• "I just became a team lead for the first time. How can I effectively manage 6 developers while maintaining team morale?"
• "My startup needs to hire our first 5 employees. What roles should I prioritize and how should I structure compensation?"

**The key is to be specific about your situation, goals, and constraints!**"""
    
    def get_example_suggestions(self) -> List[str]:
        """Get example-related suggestions"""
        return [
            "1. 🚀 Try one of these business examples",
            "2. 💼 Test a career development question",
            "3. 🎯 Use a personal development example",
            "4. 💡 Try a technology decision example",
            "5. 📝 Ask your own detailed question",
            "6. 🔄 Go back to the main menu"
        ]
```

### **Main Flask Application (main.py)**
```python
from flask import Flask, request, jsonify
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
import os
import logging
from datetime import datetime
import uuid

from models import db, Conversation, ConversationEntry, UserSession
from agents import AgentChain
from conversation_manager import ConversationManager
from config import Config

# Configure logging
logging.basicConfig(level=logging.INFO)

# Initialize Flask app
app = Flask(__name__)
app.config.from_object(Config)

# Initialize extensions
db.init_app(app)
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["100 per hour"]
)

# Initialize systems
agent_chain = AgentChain()
conversation_manager = ConversationManager()

# Create database tables
with app.app_context():
    db.create_all()

@app.route('/api/chat', methods=['POST'])
@limiter.limit("30 per minute")
def chat():
    """
    Main conversational endpoint
    Handles all user interactions with guidance and suggestions
    """
    try:
        data = request.get_json()
        user_input = data.get('message', '').strip()
        session_id = data.get('session_id') or str(uuid.uuid4())
        
        # Handle empty input (return welcome message)
        if not user_input:
            return jsonify({
                "response": conversation_manager.get_welcome_message(),
                "session_id": session_id,
                "suggestions": conversation_manager.get_welcome_suggestions()
            })
        
        # Process user input through conversation manager
        result = conversation_manager.process_input(user_input, session_id)
        
        # Add session_id to response
        result['session_id'] = session_id
        
        # Update session tracking
        session = UserSession.query.get(session_id)
        if not session:
            session = UserSession(session_id=session_id)
            db.session.add(session)
        
        session.total_interactions += 1
        session.updated_at = datetime.utcnow()
        db.session.commit()
        
        return jsonify(result)
        
    except Exception as e:
        logging.error(f"Error in chat endpoint: {str(e)}")
        return jsonify({
            "response": "I apologize, but I encountered an error. Please try again or type 'help' for assistance.",
            "error": True,
            "suggestions": [
                "1. 🔄 Try again",
                "2. 📚 Get help",
                "3. 🚀 Start over"
            ]
        }), 500

@app.route('/api/analyze', methods=['POST'])
@limiter.limit("10 per minute")
def analyze():
    """
    Trigger full 7-agent analysis
    Used when user confirms they want comprehensive analysis
    """
    try:
        data = request.get_json()
        query = data.get('query', '').strip()
        session_id = data.get('session_id')
        
        if not query or len(query) < 20:
            return jsonify({
                "response": "I need a more detailed question to provide a comprehensive analysis. Please describe your situation or challenge in more detail.",
                "suggestions": [
                    "1. 📝 Describe your current situation",
                    "2. 🎯 Explain what you're trying to achieve", 
                    "3. 💡 Mention any specific challenges you're facing"
                ]
            })
        
        # Create conversation for analysis
        conversation = Conversation(
            initial_input=query,
            session_id=session_id,
            user_guided=True
        )
        db.session.add(conversation)
        db.session.commit()
        
        # Start analysis
        result = agent_chain.process_query(conversation.id, query)
        
        if result['success']:
            response = conversation_manager.format_analysis_response(result)
            return jsonify({
                "response": response,
                "analysis_complete": True,
                "conversation_id": conversation.id,
                "suggestions": conversation_manager.get_post_analysis_suggestions(),
                "session_id": session_id
            })
        else:
            return jsonify({
                "response": f"I encountered an issue during analysis: {result['error']}. Would you like to try again?",
                "suggestions": [
                    "1. 🔄 Try again", 
                    "2. 📝 Rephrase your question", 
                    "3. 📚 Get help"
                ]
            })
        
    except Exception as e:
        logging.error(f"Error in analyze endpoint: {str(e)}")
        return jsonify({
            "response": "I'm sorry, but I encountered an error during analysis. Please try again.",
            "error": True,
            "suggestions": [
                "1. 🔄 Try again",
                "2. 📚 Get help",
                "3. 🚀 Start over"
            ]
        }), 500

@app.route('/api/help', methods=['GET'])
def help_guide():
    """Provide comprehensive help and guidance"""
    return jsonify({
        "response": conversation_manager.get_help_guide(),
        "suggestions": conversation_manager.get_help_suggestions()
    })

@app.route('/api/examples', methods=['GET'])
def get_examples():
    """Provide example queries and use cases"""
    return jsonify({
        "response": conversation_manager.get_examples(),
        "suggestions": conversation_manager.get_example_suggestions()
    })

@app.route('/api/conversation/<conversation_id>', methods=['GET'])
def get_conversation(conversation_id):
    """Get complete conversation details"""
    try:
        conversation = Conversation.query.get(conversation_id)
        if not conversation:
            return jsonify({"error": "Conversation not found"}), 404
        
        # Get all entries
        entries = ConversationEntry.query.filter_by(
            conversation_id=conversation_id
        ).order_by(ConversationEntry.created_at).all()
        
        return jsonify({
            "conversation": {
                "id": conversation.id,
                "created_at": conversation.created_at.isoformat(),
                "is_complete": conversation.is_complete,
                "initial_input": conversation.initial_input,
                "total_tokens": conversation.total_tokens_used,
                "processing_time": conversation.total_processing_time,
                "entries": [
                    {
                        "agent_name": entry.agent_name,
                        "agent_role": entry.agent_role,
                        "response": entry.response,
                        "processing_time": entry.processing_time,
                        "tokens_used": entry.tokens_used
                    }
                    for entry in entries
                ]
            }
        })
        
    except Exception as e:
        logging.error(f"Error getting conversation: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """System health check"""
    try:
        # Check database connection
        db.session.execute('SELECT 1')
        
        # Check OpenAI API key
        openai_configured = bool(os.getenv('OPENAI_API_KEY'))
        
        return jsonify({
            "status": "healthy",
            "database": "connected",
            "openai": "configured" if openai_configured else "not configured",
            "timestamp": datetime.utcnow().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            "status": "unhealthy",
            "error": str(e),
            "timestamp": datetime.utcnow().isoformat()
        }), 500

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """Get system statistics"""
    try:
        total_conversations = Conversation.query.count()
        completed_conversations = Conversation.query.filter_by(is_complete=True).count()
        total_sessions = UserSession.query.count()
        total_tokens = db.session.query(db.func.sum(Conversation.total_tokens_used)).scalar() or 0
        
        return jsonify({
            "total_conversations": total_conversations,
            "completed_conversations": completed_conversations,
            "total_sessions": total_sessions,
            "completion_rate": (completed_conversations / total_conversations * 100) if total_conversations > 0 else 0,
            "total_tokens_used": total_tokens,
            "average_tokens_per_conversation": (total_tokens / completed_conversations) if completed_conversations > 0 else 0
        })
        
    except Exception as e:
        logging.error(f"Error getting stats: {str(e)}")
        return jsonify({"error": "Internal server error"}), 500

if __name__ == '__main__':
    # Validate configuration
    Config.validate_required_env_vars()
    
    app.run(host='0.0.0.0', port=5000, debug=False)
```

### **Configuration (config.py)**
```python
import os
from datetime import timedelta

class Config:
    # Flask Configuration
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///operatoros.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    
    # OpenAI Configuration
    OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
    
    # Rate Limiting
    RATELIMIT_STORAGE_URL = os.environ.get('RATELIMIT_STORAGE_URL') or 'memory://'
    RATELIMIT_DEFAULT = "100 per hour"
    
    # Security
    WTF_CSRF_ENABLED = True
    WTF_CSRF_TIME_LIMIT = 3600
    SESSION_COOKIE_SECURE = False  # Set to True in production
    SESSION_COOKIE_HTTPONLY = True
    SESSION_COOKIE_SAMESITE = 'Lax'
    PERMANENT_SESSION_LIFETIME = timedelta(hours=24)
    
    # Admin
    ADMIN_PASSWORD = os.environ.get('ADMIN_PASSWORD') or 'admin123'
    
    @staticmethod
    def validate_required_env_vars():
        """Validate required environment variables"""
        required_vars = ['OPENAI_API_KEY']
        missing_vars = []
        
        for var in required_vars:
            if not os.environ.get(var):
                missing_vars.append(var)
        
        if missing_vars:
            raise ValueError(f"Missing required environment variables: {', '.join(missing_vars)}")
```

---

## 🚀 **Complete API Usage Guide**

### **1. Start Conversation**
```bash
POST /api/chat
Content-Type: application/json

{
  "message": ""
}
```

**Response:**
```json
{
  "response": "👋 **Welcome to OperatorOS!**...",
  "session_id": "uuid-here",
  "suggestions": [
    "1. 🚀 Get help with business strategy and planning",
    "2. 💼 Explore career development and transitions",
    "..."
  ]
}
```

### **2. User Makes Selection**
```bash
POST /api/chat
Content-Type: application/json

{
  "message": "1",
  "session_id": "uuid-here"
}
```

**Response:**
```json
{
  "response": "🚀 **Business Strategy & Planning**...",
  "suggestions": [
    "1. 💡 I want to start a new business or validate an idea",
    "2. 📈 I need help scaling my existing business",
    "..."
  ]
}
```

### **3. User Provides Details**
```bash
POST /api/chat
Content-Type: application/json

{
  "message": "I want to start a SaaS business targeting small restaurants. I have $50K in savings and 2 years of software development experience. What's the best approach?",
  "session_id": "uuid-here"
}
```

**Response:**
```json
{
  "response": "Perfect! I can see you have a detailed question...",
  "suggestions": [
    "1. 🚀 Yes, run the full 7-agent analysis",
    "2. 📝 Let me add more context first",
    "..."
  ],
  "ready_for_analysis": true,
  "query": "User's detailed question..."
}
```

### **4. Trigger Full Analysis**
```bash
POST /api/analyze
Content-Type: application/json

{
  "query": "I want to start a SaaS business targeting small restaurants...",
  "session_id": "uuid-here"
}
```

**Response:**
```json
{
  "response": "🎉 **Analysis Complete!**\n\nI've processed your question through all 7 agents...",
  "analysis_complete": true,
  "conversation_id": "uuid-here",
  "suggestions": [
    "1. 💡 Ask a follow-up question about the analysis",
    "2. 🎯 Dive deeper into a specific recommendation",
    "..."
  ]
}
```

### **5. Get Help**
```bash
GET /api/help
```

### **6. Get Examples**
```bash
GET /api/examples
```

### **7. Health Check**
```bash
GET /api/health
```

---

## 🎯 **Key Features**

### **Conversational Intelligence**
- **Progressive Guidance**: Step-by-step user guidance
- **Numbered Selections**: Clear, intuitive choices
- **Context Awareness**: Maintains conversation flow
- **Smart Suggestions**: Contextual next steps

### **7-Agent Analysis**
- **Comprehensive Intelligence**: Multi-perspective analysis
- **Strategic Depth**: Deep, actionable insights
- **Persistent Storage**: All conversations saved
- **Quality Metrics**: Performance tracking

### **Replit Agent Integration**
- **Pure Backend**: No UI components
- **API-First Design**: Perfect for agent interaction
- **JSON Responses**: Structured, parseable data
- **Session Management**: Persistent user state

### **Production Ready**
- **Error Handling**: Graceful error management
- **Rate Limiting**: Abuse prevention
- **Logging**: Comprehensive system monitoring
- **Security**: Input validation and protection

---

## 📁 **File Structure**
```
/
├── main.py                 # Main Flask application
├── agents.py              # 7-agent system implementation
├── conversation_manager.py # Conversational flow logic
├── models.py              # Database models
├── config.py              # Configuration management
├── requirements.txt       # Python dependencies
└── .env                   # Environment variables
```

---

## 🔧 **Replit Setup**

### **1. Create Project**
- Choose Python template
- Name: "operatoros-conversational"

### **2. Environment Variables**
Add to Replit Secrets:
```
OPENAI_API_KEY=your_key_here
DATABASE_URL=postgresql://user:pass@host/db
SECRET_KEY=your_secret_key
```

### **3. Run**
```bash
python main.py
```

---

**This complete implementation combines powerful 7-agent intelligence with intuitive conversational guidance, creating a system that helps users get maximum value from the OperatorOS platform through natural, guided interactions.**